function __isPromise(s){return s instanceof Promise||s instanceof ArgsPromise}function __handle(s){let e=void 0===s?[]:s instanceof Array?s:[s];return 1===e.length&&__isPromise(e[0])?new Promise(((s,t)=>{e[0].then(((...e)=>{s(e)}),((...s)=>{t(s)}))})):e}class APOpts{constructor(s=new Promise((()=>{})),e=[]){this.residents=e,this.promise=s}}class ArgsPromise{constructor(s){if(this[Symbol.toStringTag]="ArgsPromise",s instanceof APOpts)this._residents=s.residents,this._promise=s.promise;else{if(!(s instanceof Function))throw new Error("The constructor of ArgsPromise expects an executor function as argument.");this._residents=[],this._promise=new Promise(((e,t)=>{s(((...s)=>{e(__handle(s))}),((...s)=>{t(s)}),((...s)=>{this._residents=s}))}))}}then(s,e){let t=s?e=>__handle(s(...e,...this._residents)):void 0,i=e?s=>__handle(e(...s,...this._residents)):void 0;return new ArgsPromise(new APOpts(this._promise.then(t,i),this._residents))}catch(s){let e=s?e=>__handle(s(...e,...this._residents)):void 0;return new ArgsPromise(new APOpts(this._promise.catch(e),this._residents))}finally(s){let e=s?()=>__handle(s(...this._residents)):void 0;return new ArgsPromise(new APOpts(this._promise.finally(e),this._residents))}pack(){return new ArgsPromise((s=>{this._promise.then((e=>{s([...e,...this._residents])}))}))}to(){return new ArgsPromise((s=>{this._promise.then((e=>{s([null,[...e,...this._residents]])})).catch((e=>{s([[...e,...this._residents],void 0])}))}))}}export default ArgsPromise;export{ArgsPromise,APOpts};